class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

class DoublyList:
    def __init__(self):
        self.head = None

    def append(self, data):
        # Create a new node
        new_node = Node(data)

        if self.head is None:
            # If the list is empty, make the new node as the head
            self.head = new_node
        else:
            current = self.head
            while current.next:
                # Traverse to the last node
                current = current.next
            current.next = new_node
            new_node.prev = current

    def forward(self):
        # Traverse and print the list in the forward direction
        current = self.head
        while current:
            print(current.data, end=" ")
            current = current.next

    def reverse(self):
        # Traverse and print the list in the reverse direction
        current = self.head
        while current.next:
            current = current.next
        while current:
            print(current.data, end=" ")
            current = current.prev

# Create a DoublyList object
dl = DoublyList()

while True:
    data = int(input())
    if data == -1:
        break
    dl.append(data)

print("Original Order: ")
dl.forward()
print("\nReverse Order: ")
dl.reverse()
